// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	dataobject "go-web-demo/src/dal/dataobject"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: user
func (_m *UserService) CreateUser(user *dataobject.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dataobject.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//  - user *dataobject.User
func (_e *UserService_Expecter) CreateUser(user interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", user)}
}

func (_c *UserService_CreateUser_Call) Run(run func(user *dataobject.User)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dataobject.User))
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(err error) *UserService_CreateUser_Call {
	_c.Call.Return(err)
	return _c
}

// DeleteUserById provides a mock function with given fields: id
func (_m *UserService) DeleteUserById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_DeleteUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserById'
type UserService_DeleteUserById_Call struct {
	*mock.Call
}

// DeleteUserById is a helper method to define mock.On call
//  - id uint
func (_e *UserService_Expecter) DeleteUserById(id interface{}) *UserService_DeleteUserById_Call {
	return &UserService_DeleteUserById_Call{Call: _e.mock.On("DeleteUserById", id)}
}

func (_c *UserService_DeleteUserById_Call) Run(run func(id uint)) *UserService_DeleteUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserService_DeleteUserById_Call) Return(err error) *UserService_DeleteUserById_Call {
	_c.Call.Return(err)
	return _c
}

// GetUserById provides a mock function with given fields: id
func (_m *UserService) GetUserById(id uint) (*dataobject.User, error) {
	ret := _m.Called(id)

	var r0 *dataobject.User
	if rf, ok := ret.Get(0).(func(uint) *dataobject.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataobject.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type UserService_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//  - id uint
func (_e *UserService_Expecter) GetUserById(id interface{}) *UserService_GetUserById_Call {
	return &UserService_GetUserById_Call{Call: _e.mock.On("GetUserById", id)}
}

func (_c *UserService_GetUserById_Call) Run(run func(id uint)) *UserService_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserService_GetUserById_Call) Return(user *dataobject.User, err error) *UserService_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

// ListUsers provides a mock function with given fields:
func (_m *UserService) ListUsers() ([]*dataobject.User, error) {
	ret := _m.Called()

	var r0 []*dataobject.User
	if rf, ok := ret.Get(0).(func() []*dataobject.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dataobject.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type UserService_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
func (_e *UserService_Expecter) ListUsers() *UserService_ListUsers_Call {
	return &UserService_ListUsers_Call{Call: _e.mock.On("ListUsers")}
}

func (_c *UserService_ListUsers_Call) Run(run func()) *UserService_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserService_ListUsers_Call) Return(userList []*dataobject.User, err error) *UserService_ListUsers_Call {
	_c.Call.Return(userList, err)
	return _c
}

// UpdateUser provides a mock function with given fields: user
func (_m *UserService) UpdateUser(user *dataobject.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dataobject.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//  - user *dataobject.User
func (_e *UserService_Expecter) UpdateUser(user interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", user)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(user *dataobject.User)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dataobject.User))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(err error) *UserService_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
