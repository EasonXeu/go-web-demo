// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	dataobject "go-web-demo/src/dal/dataobject"

	mock "github.com/stretchr/testify/mock"
)

// UserMapper is an autogenerated mock type for the UserMapper type
type UserMapper struct {
	mock.Mock
}

type UserMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *UserMapper) EXPECT() *UserMapper_Expecter {
	return &UserMapper_Expecter{mock: &_m.Mock}
}

// CreateUserDO provides a mock function with given fields: user
func (_m *UserMapper) CreateUserDO(user *dataobject.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dataobject.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMapper_CreateUserDO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUserDO'
type UserMapper_CreateUserDO_Call struct {
	*mock.Call
}

// CreateUserDO is a helper method to define mock.On call
//  - user *dataobject.User
func (_e *UserMapper_Expecter) CreateUserDO(user interface{}) *UserMapper_CreateUserDO_Call {
	return &UserMapper_CreateUserDO_Call{Call: _e.mock.On("CreateUserDO", user)}
}

func (_c *UserMapper_CreateUserDO_Call) Run(run func(user *dataobject.User)) *UserMapper_CreateUserDO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dataobject.User))
	})
	return _c
}

func (_c *UserMapper_CreateUserDO_Call) Return(err error) *UserMapper_CreateUserDO_Call {
	_c.Call.Return(err)
	return _c
}

// DeleteUserDOById provides a mock function with given fields: id
func (_m *UserMapper) DeleteUserDOById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMapper_DeleteUserDOById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserDOById'
type UserMapper_DeleteUserDOById_Call struct {
	*mock.Call
}

// DeleteUserDOById is a helper method to define mock.On call
//  - id uint
func (_e *UserMapper_Expecter) DeleteUserDOById(id interface{}) *UserMapper_DeleteUserDOById_Call {
	return &UserMapper_DeleteUserDOById_Call{Call: _e.mock.On("DeleteUserDOById", id)}
}

func (_c *UserMapper_DeleteUserDOById_Call) Run(run func(id uint)) *UserMapper_DeleteUserDOById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserMapper_DeleteUserDOById_Call) Return(err error) *UserMapper_DeleteUserDOById_Call {
	_c.Call.Return(err)
	return _c
}

// GetUserDOById provides a mock function with given fields: id
func (_m *UserMapper) GetUserDOById(id uint) (*dataobject.User, error) {
	ret := _m.Called(id)

	var r0 *dataobject.User
	if rf, ok := ret.Get(0).(func(uint) *dataobject.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataobject.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMapper_GetUserDOById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserDOById'
type UserMapper_GetUserDOById_Call struct {
	*mock.Call
}

// GetUserDOById is a helper method to define mock.On call
//  - id uint
func (_e *UserMapper_Expecter) GetUserDOById(id interface{}) *UserMapper_GetUserDOById_Call {
	return &UserMapper_GetUserDOById_Call{Call: _e.mock.On("GetUserDOById", id)}
}

func (_c *UserMapper_GetUserDOById_Call) Run(run func(id uint)) *UserMapper_GetUserDOById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *UserMapper_GetUserDOById_Call) Return(user *dataobject.User, err error) *UserMapper_GetUserDOById_Call {
	_c.Call.Return(user, err)
	return _c
}

// ListUserDOs provides a mock function with given fields:
func (_m *UserMapper) ListUserDOs() ([]*dataobject.User, error) {
	ret := _m.Called()

	var r0 []*dataobject.User
	if rf, ok := ret.Get(0).(func() []*dataobject.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dataobject.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserMapper_ListUserDOs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserDOs'
type UserMapper_ListUserDOs_Call struct {
	*mock.Call
}

// ListUserDOs is a helper method to define mock.On call
func (_e *UserMapper_Expecter) ListUserDOs() *UserMapper_ListUserDOs_Call {
	return &UserMapper_ListUserDOs_Call{Call: _e.mock.On("ListUserDOs")}
}

func (_c *UserMapper_ListUserDOs_Call) Run(run func()) *UserMapper_ListUserDOs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserMapper_ListUserDOs_Call) Return(userList []*dataobject.User, err error) *UserMapper_ListUserDOs_Call {
	_c.Call.Return(userList, err)
	return _c
}

// UpdateUserDO provides a mock function with given fields: user
func (_m *UserMapper) UpdateUserDO(user *dataobject.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dataobject.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserMapper_UpdateUserDO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserDO'
type UserMapper_UpdateUserDO_Call struct {
	*mock.Call
}

// UpdateUserDO is a helper method to define mock.On call
//  - user *dataobject.User
func (_e *UserMapper_Expecter) UpdateUserDO(user interface{}) *UserMapper_UpdateUserDO_Call {
	return &UserMapper_UpdateUserDO_Call{Call: _e.mock.On("UpdateUserDO", user)}
}

func (_c *UserMapper_UpdateUserDO_Call) Run(run func(user *dataobject.User)) *UserMapper_UpdateUserDO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dataobject.User))
	})
	return _c
}

func (_c *UserMapper_UpdateUserDO_Call) Return(err error) *UserMapper_UpdateUserDO_Call {
	_c.Call.Return(err)
	return _c
}

type mockConstructorTestingTNewUserMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserMapper creates a new instance of UserMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserMapper(t mockConstructorTestingTNewUserMapper) *UserMapper {
	mock := &UserMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
